---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Your Name and UID"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.
```{r}
#load necessary libraries
library(GGally)
library(gtsummary)
library(tidyverse)
library(tidymodels)

#load the mimic-icu dataset
mimic_icu_cohort <- readRDS("C:/Users/yanya/Documents/Biostat-203B-HW-W25/hw4/mimiciv_shiny/mimic_icu_cohort.rds") |>
  mutate(
    insurance = as.factor(insurance),
    marital_status = as.factor(marital_status),
    gender = as.factor(gender),
    los_long = as.logical(los_long), # Ensure it is TRUE/FALSE
    los_long = factor(los_long, levels = c(FALSE, TRUE), labels = c("no", "yes"))) |>
    drop_na(los_long)

#have an overview of the dataset
#mimic_icu_cohort |> tbl_summary(by = los_long)

```
```{r}
names(mimic_icu_cohort)
library(dplyr)
mimic_other %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  print(width = Inf)
```
2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
#| eval: false
set.seed(203)

# sort
mimic_icu_cohort <- mimic_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id) |>
  select(first_careunit, gender, age_at_intime, marital_status, race,
         `heart rate`, `non invasive blood pressure systolic`, `non invasive blood pressure diastolic`, 
         `respiratory rate`, `temperature fahrenheit`,
         bicarbonate, chloride, creatinine, glucose, potassium, sodium, hematocrit, wbc, 
         los_long)

#Initial split into test and non-test sets

data_split <- initial_split(
  mimic_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )

mimic_other <- training(data_split)
dim(mimic_other)

mimic_test <- testing(data_split)
dim(mimic_test)
```

3. Train and tune the models using the training set.

**Solution:** I choose to do logistic regression, random forest, xgboost, and finally model stacking.
```{r}
mimic_other %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
   print(width = Inf)

table(mimic_icu_cohort$los_long)
summary(mimic_icu_cohort$los_long)
str(mimic_icu_cohort$los_long)

table(mimic_other$los_long)

```
Here is the code for logistic regression:
```{r}
#Recipe 
logit_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_other
  ) |>
  step_unknown(all_nominal(), -all_outcomes()) |>  # Handle missing categorical values
  # mean imputation for numeric variable
  step_impute_mean(`heart rate`, `non invasive blood pressure systolic`, `non invasive blood pressure diastolic`, 
         `respiratory rate`, `temperature fahrenheit`,
         bicarbonate, chloride, creatinine, glucose, potassium, sodium, hematocrit, wbc) |>
  # mode imputation for catrgorical variable
  step_impute_mode(marital_status) |>
  # create traditional dummy variables
  step_dummy(all_nominal_predictors()) |>
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  # estimate the means and standard deviations
  # prep(training = Heart_other, retain = TRUE) |>
  print()


# Model
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```
```{r}
# Workflow, bundle the recipe and model

logit_wf <- workflow() |>
  add_recipe(logit_recipe) |>
  add_model(logit_mod) |>
  print()

# Tune the model(the penalty and mixture hyperparameters).

param_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(100, 5)
  ) |>
  print()
```

```{r}
# Set Cross-Validation partitions
set.seed(203)

folds <- vfold_cv(mimic_other, v = 5)
folds

# fit cross-validation
(logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )) |>
  system.time()
logit_fit
```
```{r}
# Visualize
logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()
```
```{r}
#show top 5 models and select the best one
logit_fit |>
  show_best(metric = "roc_auc")

best_logit <- logit_fit |>
  select_best(metric = "roc_auc")
best_logit

#finalize workflow
# Final workflow
final_wf <- logit_wf |>
  finalize_workflow(best_logit)
final_wf

# Fit the whole training set, then predict the test cases
final_fit <- 
  final_wf |>
  last_fit(data_split)
final_fit

# Test metrics
final_fit |> 
  collect_metrics()
```



4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?
